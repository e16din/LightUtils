package com.e16din.lightutils.utils

import android.content.res.*
import android.graphics.Movie
import android.graphics.drawable.Drawable
import android.os.Bundle
import android.util.AttributeSet
import android.util.DisplayMetrics
import android.util.TypedValue
import org.xmlpull.v1.XmlPullParserException
import java.io.IOException
import java.io.InputStream

open class ResourcesUtils : TextViewUtils() {
    companion object {

        fun getString(id: Int): String {
            return resources!!.getString(id)
        }

        fun getString(id: Int, vararg formatArgs: Any): String {
            return resources!!.getString(id, formatArgs)
        }

        fun getQuantityString(id: Int, quantity: Int, vararg formatArgs: Any): String {
            return resources!!.getQuantityString(id, quantity, formatArgs)
        }

        fun getQuantityString(id: Int, quantity: Int): String {
            return resources!!.getQuantityString(id, quantity)
        }


        @Throws(Resources.NotFoundException::class)
        fun getText(id: Int): CharSequence {
            return resources!!.getText(id)
        }

        @Throws(Resources.NotFoundException::class)
        fun getQuantityText(id: Int, quantity: Int): CharSequence {
            return resources!!.getQuantityText(id, quantity)
        }

        fun getText(id: Int, def: CharSequence): CharSequence {
            return resources!!.getText(id, def)
        }

        @Throws(Resources.NotFoundException::class)
        fun getTextArray(id: Int): Array<CharSequence> {
            return resources!!.getTextArray(id)
        }

        @Throws(Resources.NotFoundException::class)
        fun getStringArray(id: Int): Array<String> {
            return resources!!.getStringArray(id)
        }

        @Throws(Resources.NotFoundException::class)
        fun getIntArray(id: Int): IntArray {
            return resources!!.getIntArray(id)
        }

        @Throws(Resources.NotFoundException::class)
        fun obtainTypedArray(id: Int): TypedArray {
            return resources!!.obtainTypedArray(id)
        }

        @Throws(Resources.NotFoundException::class)
        fun getDimension(id: Int): Float {
            return resources!!.getDimension(id)
        }

        @Throws(Resources.NotFoundException::class)
        fun getDimensionPixelOffset(id: Int): Int {
            return resources!!.getDimensionPixelOffset(id)
        }

        @Throws(Resources.NotFoundException::class)
        fun getDimensionPixelSize(id: Int): Int {
            return resources!!.getDimensionPixelSize(id)
        }

        fun getFraction(id: Int, base: Int, pbase: Int): Float {
            return resources!!.getFraction(id, base, pbase)
        }

        @Throws(Resources.NotFoundException::class)
        fun getDrawable(id: Int): Drawable {
            return resources!!.getDrawable(id)
        }

        @Throws(Resources.NotFoundException::class)
        fun getDrawable(id: Int, theme: Resources.Theme): Drawable {
            return resources!!.getDrawable(id, theme)
        }


        @Deprecated("Use {@link #getDrawableForDensity(int, int, Theme)} instead.")
        @Throws(Resources.NotFoundException::class)
        fun getDrawableForDensity(id: Int, density: Int): Drawable {
            return resources!!.getDrawableForDensity(id, density)
        }

        fun getDrawableForDensity(id: Int, density: Int, theme: Resources.Theme): Drawable {
            return resources!!.getDrawableForDensity(id, density, theme)
        }

        @Throws(Resources.NotFoundException::class)
        fun getMovie(id: Int): Movie {
            return resources!!.getMovie(id)
        }


        /**
         * [ContextCompat.getColor()]
         *
         *
         * Returns a color associated with a particular resource ID
         *
         *
         * Starting in [android.os.Build.VERSION_CODES.M], the returned
         * color will be styled for the specified Context's theme.
         *
         * @param id The desired resource identifier, as generated by the aapt
         * tool. This integer encodes the package, type, and resource
         * entry. The value 0 is an invalid identifier.
         * @return A single color value in the form 0xAARRGGBB.
         * @throws android.content.res.Resources.NotFoundException if the given ID
         * does not exist.
         */
        fun getColor(id: Int): Int {
            return resources!!.getColor(id)
        }

        @Throws(Resources.NotFoundException::class)
        fun getColor(id: Int, theme: Resources.Theme): Int {
            return resources!!.getColor(id, theme)
        }

        @Throws(Resources.NotFoundException::class)
        fun getColorStateList(id: Int): ColorStateList {
            return resources!!.getColorStateList(id)
        }

        @Throws(Resources.NotFoundException::class)
        fun getColorStateList(id: Int, theme: Resources.Theme): ColorStateList {
            return resources!!.getColorStateList(id, theme)
        }

        @Throws(Resources.NotFoundException::class)
        fun getBoolean(id: Int): Boolean {
            return resources!!.getBoolean(id)
        }

        @Throws(Resources.NotFoundException::class)
        fun getInteger(id: Int): Int {
            return resources!!.getInteger(id)
        }

        @Throws(Resources.NotFoundException::class)
        fun getLayout(id: Int): XmlResourceParser {
            return resources!!.getLayout(id)
        }

        @Throws(Resources.NotFoundException::class)
        fun getAnimation(id: Int): XmlResourceParser {
            return resources!!.getAnimation(id)
        }

        @Throws(Resources.NotFoundException::class)
        fun getXml(id: Int): XmlResourceParser {
            return resources!!.getXml(id)
        }

        @Throws(Resources.NotFoundException::class)
        fun openRawResource(id: Int): InputStream {
            return resources!!.openRawResource(id)
        }

        @Throws(Resources.NotFoundException::class)
        fun openRawResource(id: Int, value: TypedValue): InputStream {
            return resources!!.openRawResource(id, value)
        }

        @Throws(Resources.NotFoundException::class)
        fun openRawResourceFd(id: Int): AssetFileDescriptor {
            return resources!!.openRawResourceFd(id)
        }

        @Throws(Resources.NotFoundException::class)
        fun getValue(id: Int, outValue: TypedValue, resolveRefs: Boolean) {
            resources!!.getValue(id, outValue, resolveRefs)
        }

        @Throws(Resources.NotFoundException::class)
        fun getValueForDensity(id: Int, density: Int, outValue: TypedValue, resolveRefs: Boolean) {
            resources!!.getValueForDensity(id, density, outValue, resolveRefs)
        }

        @Throws(Resources.NotFoundException::class)
        fun getValue(name: String, outValue: TypedValue, resolveRefs: Boolean) {
            resources!!.getValue(name, outValue, resolveRefs)
        }

        fun newTheme(): Resources.Theme {
            return resources!!.newTheme()
        }

        fun obtainAttributes(set: AttributeSet, attrs: IntArray): TypedArray {
            return resources!!.obtainAttributes(set, attrs)
        }

        fun updateConfiguration(config: Configuration, metrics: DisplayMetrics) {
            resources!!.updateConfiguration(config, metrics)
        }

        val displayMetrics: DisplayMetrics
            get() = resources!!.displayMetrics

        val configuration: Configuration
            get() = resources!!.configuration

        fun getIdentifier(name: String, defType: String, defPackage: String): Int {
            return resources!!.getIdentifier(name, defType, defPackage)
        }

        @Throws(Resources.NotFoundException::class)
        fun getResourceName(resid: Int): String {
            return resources!!.getResourceName(resid)
        }

        @Throws(Resources.NotFoundException::class)
        fun getResourcePackageName(resid: Int): String {
            return resources!!.getResourcePackageName(resid)
        }

        @Throws(Resources.NotFoundException::class)
        fun getResourceTypeName(resid: Int): String {
            return resources!!.getResourceTypeName(resid)
        }

        @Throws(Resources.NotFoundException::class)
        fun getResourceEntryName(resid: Int): String {
            return resources!!.getResourceEntryName(resid)
        }

        @Throws(XmlPullParserException::class, IOException::class)
        fun parseBundleExtras(parser: XmlResourceParser, outBundle: Bundle) {
            resources!!.parseBundleExtras(parser, outBundle)
        }

        @Throws(XmlPullParserException::class)
        fun parseBundleExtra(tagName: String, attrs: AttributeSet, outBundle: Bundle) {
            resources!!.parseBundleExtra(tagName, attrs, outBundle)
        }

        val assets
            get() = resources!!.assets

        fun flushLayoutCache() = resources!!.flushLayoutCache()

        fun finishPreloading() = resources!!.finishPreloading()
    }
}
