package com.e16din.lightutils.utils;

import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.content.res.ColorStateList;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.content.res.XmlResourceParser;
import android.graphics.Movie;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.TypedValue;

import org.xmlpull.v1.XmlPullParserException;

import java.io.IOException;
import java.io.InputStream;

import static com.e16din.lightutils.utils.UExtKt.resources;

public class ResourcesUtils extends TextViewUtils {

    public static String getString(int id) {
        return resources().getString(id);
    }

    public static String getString(int id, Object... formatArgs) {
        return resources().getString(id, formatArgs);
    }

    public static String getQuantityString(int id, int quantity, Object... formatArgs) {
        return resources().getQuantityString(id, quantity, formatArgs);
    }

    public static String getQuantityString(int id, int quantity) {
        return resources().getQuantityString(id, quantity);
    }


    public static CharSequence getText(int id) throws Resources.NotFoundException {
        return resources().getText(id);
    }

    public static CharSequence getQuantityText(int id, int quantity) throws Resources.NotFoundException {
        return resources().getQuantityText(id, quantity);
    }

    public static CharSequence getText(int id, CharSequence def) {
        return resources().getText(id, def);
    }

    public static CharSequence[] getTextArray(int id) throws Resources.NotFoundException {
        return resources().getTextArray(id);
    }

    public static String[] getStringArray(int id) throws Resources.NotFoundException {
        return resources().getStringArray(id);
    }

    public static int[] getIntArray(int id) throws Resources.NotFoundException {
        return resources().getIntArray(id);
    }

    public static TypedArray obtainTypedArray(int id) throws Resources.NotFoundException {
        return resources().obtainTypedArray(id);
    }

    public static float getDimension(int id) throws Resources.NotFoundException {
        return resources().getDimension(id);
    }

    public static int getDimensionPixelOffset(int id) throws Resources.NotFoundException {
        return resources().getDimensionPixelOffset(id);
    }

    public static int getDimensionPixelSize(int id) throws Resources.NotFoundException {
        return resources().getDimensionPixelSize(id);
    }

    public static float getFraction(int id, int base, int pbase) {
        return resources().getFraction(id, base, pbase);
    }

    public static Drawable getDrawable(int id) throws Resources.NotFoundException {
        return resources().getDrawable(id);
    }

    public static Drawable getDrawable(int id, Resources.Theme theme) throws Resources.NotFoundException {
        return resources().getDrawable(id, theme);
    }

    /**
     * @deprecated
     */
    @Deprecated
    public static Drawable getDrawableForDensity(int id, int density) throws Resources.NotFoundException {
        return resources().getDrawableForDensity(id, density);
    }

    public static Drawable getDrawableForDensity(int id, int density, Resources.Theme theme) {
        return resources().getDrawableForDensity(id, density, theme);
    }

    public static Movie getMovie(int id) throws Resources.NotFoundException {
        return resources().getMovie(id);
    }


    /**
     * [ContextCompat.getColor()]
     * <p/>
     * Returns a color associated with a particular resource ID
     * <p/>
     * Starting in {@link android.os.Build.VERSION_CODES#M}, the returned
     * color will be styled for the specified Context's theme.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @return A single color value in the form 0xAARRGGBB.
     * @throws android.content.res.Resources.NotFoundException if the given ID
     *                                                         does not exist.
     */
    public static int getColor(int id) {
        return resources().getColor(id);
    }

    public static int getColor(int id, Resources.Theme theme) throws Resources.NotFoundException {
        return resources().getColor(id, theme);
    }

    public static ColorStateList getColorStateList(int id) throws Resources.NotFoundException {
        return resources().getColorStateList(id);
    }

    public static ColorStateList getColorStateList(int id, Resources.Theme theme) throws Resources.NotFoundException {
        return resources().getColorStateList(id, theme);
    }

    public static boolean getBoolean(int id) throws Resources.NotFoundException {
        return resources().getBoolean(id);
    }

    public static int getInteger(int id) throws Resources.NotFoundException {
        return resources().getInteger(id);
    }

    public static XmlResourceParser getLayout(int id) throws Resources.NotFoundException {
        return resources().getLayout(id);
    }

    public static XmlResourceParser getAnimation(int id) throws Resources.NotFoundException {
        return resources().getAnimation(id);
    }

    public static XmlResourceParser getXml(int id) throws Resources.NotFoundException {
        return resources().getXml(id);
    }

    public static InputStream openRawResource(int id) throws Resources.NotFoundException {
        return resources().openRawResource(id);
    }

    public static InputStream openRawResource(int id, TypedValue value) throws Resources.NotFoundException {
        return resources().openRawResource(id, value);
    }

    public static AssetFileDescriptor openRawResourceFd(int id) throws Resources.NotFoundException {
        return resources().openRawResourceFd(id);
    }

    public static void getValue(int id, TypedValue outValue, boolean resolveRefs) throws Resources.NotFoundException {
        resources().getValue(id, outValue, resolveRefs);
    }

    public static void getValueForDensity(int id, int density, TypedValue outValue, boolean resolveRefs) throws Resources.NotFoundException {
        resources().getValueForDensity(id, density, outValue, resolveRefs);
    }

    public static void getValue(String name, TypedValue outValue, boolean resolveRefs) throws Resources.NotFoundException {
        resources().getValue(name, outValue, resolveRefs);
    }

    public static Resources.Theme newTheme() {
        return resources().newTheme();
    }

    public static TypedArray obtainAttributes(AttributeSet set, int[] attrs) {
        return resources().obtainAttributes(set, attrs);
    }

    public static void updateConfiguration(Configuration config, DisplayMetrics metrics) {
        resources().updateConfiguration(config, metrics);
    }

    public static DisplayMetrics getDisplayMetrics() {
        return resources().getDisplayMetrics();
    }

    public static Configuration getConfiguration() {
        return resources().getConfiguration();
    }

    public static int getIdentifier(String name, String defType, String defPackage) {
        return resources().getIdentifier(name, defType, defPackage);
    }

    public static String getResourceName(int resid) throws Resources.NotFoundException {
        return resources().getResourceName(resid);
    }

    public static String getResourcePackageName(int resid) throws Resources.NotFoundException {
        return resources().getResourcePackageName(resid);
    }

    public static String getResourceTypeName(int resid) throws Resources.NotFoundException {
        return resources().getResourceTypeName(resid);
    }

    public static String getResourceEntryName(int resid) throws Resources.NotFoundException {
        return resources().getResourceEntryName(resid);
    }

    public static void parseBundleExtras(XmlResourceParser parser, Bundle outBundle) throws XmlPullParserException, IOException {
        resources().parseBundleExtras(parser, outBundle);
    }

    public static void parseBundleExtra(String tagName, AttributeSet attrs, Bundle outBundle) throws XmlPullParserException {
        resources().parseBundleExtra(tagName, attrs, outBundle);
    }

    public static AssetManager getAssets() {
        return resources().getAssets();
    }

    public static void flushLayoutCache() {
        resources().flushLayoutCache();
    }

    public static void finishPreloading() {
        resources().finishPreloading();
    }
}
